void	*ft_memmove(void *dest, const void *src, size_t n)
{
	unsigned char		*d;
	const unsigned char	*s;

	d = (unsigned char *)dest;
	s = (const unsigned char *)src;
	if (!dest && !src)
		return (NULL);
	if (d < s)
	{
		while (n--)
			*d++ = *s++;
	}
	else
	{
		d += n;
		s += n;
		while (n--)
			*(--d) = *(--s);
	}
	return (dest);
}
#include "libft.h"
#include <stdio.h>  // Para printf
#include <string.h>  // Para comparar con memmove

int main()
{
    // Ejemplo de solapamiento de memoria (destino está dentro del bloque de memoria de origen)
    char str[] = "Hola, mundo!";
    
    // Mostrar la cadena original
    printf("Cadena original: %s\n", str);

    // Copiar 5 caracteres de str a sí misma, empezando en la posición 0 y copiando a la posición 5
    ft_memmove(str + 5, str, 5);

    // Mostrar el resultado después de ft_memmove
    printf("Resultado después de ft_memmove: %s\n", str);
    
    // Comparar con la función estándar memmove para verificar que ambas son iguales
    char str2[] = "Hola, mundo!";
    memmove(str2 + 5, str2, 5);
    printf("Resultado después de memmove: %s\n", str2);

    // Verificación adicional: comparando resultados
    if (strcmp(str, str2) == 0)
        printf("Las cadenas son iguales.\n");
    else
        printf("Las cadenas son diferentes.\n");

    return 0;
}
