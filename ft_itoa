static	int	count_char(int num)
{
	int	count;

	count = 0;
	if (num != 0)
	{
		if (num < 0)
		{
			num = num *(-1);
			count++;
		}
		while (num != 0)
		{
			num = num / 10;
			count++;
		}
	}
	else
		count = 1;
	return (count);
}

char	*ft_itoa(int n)
{
	int			len;
	char		*str;
	long int	nbr;

	len = count_char(n);
	nbr = n;
	str = malloc(sizeof(char) * (len + 1));
	if (!str)
		return (0);
	if (nbr < 0)
	{
		str[0] = '-';
		nbr = -nbr;
	}
	if (nbr == 0)
		str[0] = '0';
	str[len--] = '\0';
	while (nbr)
	{
		str[len] = ((nbr % 10) + '0');
		nbr /= 10;
		len--;
	}
	return (str);
}

#include <stdio.h>
#include <stdlib.h>

// Prototipos de las funciones
static int	count_char(int num);
char	*ft_itoa(int n);

int main(void)
{
    int test_cases[] = {123, -123, 0, 42, -2147483648};
    char *result;

    for (int i = 0; i < 5; i++)
    {
        result = ft_itoa(test_cases[i]);
        if (result)
        {
            printf("ft_itoa(%d) = \"%s\"\n", test_cases[i], result);
            free(result);  // Liberamos la memoria asignada por malloc
        }
        else
        {
            printf("Error: ft_itoa falló para el número %d\n", test_cases[i]);
        }
    }

    return 0;
}
